const CACHE_NAME = 'geo-quiz-cache-v6';
const urlsToCache = [
  '/',  
  'index.html',
  'styles.css',
  'https://unpkg.com/swiper/swiper-bundle.min.css',
  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css',
  'https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css',
  'https://unpkg.com/swiper/swiper-bundle.min.js',
  'https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js',
  'https://fonts.googleapis.com/css2?family=Montserrat:wght@700&display=swap',
  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css',
  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css',
  'https://fonts.googleapis.com/css2?family=Caveat:wght@400..700&display=swap',
  'https://fonts.googleapis.com/css2?family=Funnel+Sans:ital,wght@0,300..800;1,300..800&display=swap',
  'Logos/Geography-16x16.webp',
  'Logos/Geography-32x32.webp',
  'Logos/Geography-48x48.webp',
  'Logos/Geography.webp',
  'Logos/Geography-57x57.webp',
  'Logos/Geography-72x72.webp',
  'Logos/Geography-114x114.webp',
  'Logos/Geography-152x152.webp',
  'Logos/Geography-180x180.webp',
  'Bilder/slide1.webp',
  'Bilder/capital slide.webp',
  'Bilder/flag slide.webp',
  'Bilder/map slide.webp',
  'Logos/Capital.webp',
  'Logos/Flag.webp',
  'Logos/Map.webp',
  'Logos/River.webp',
  'Logos/Memory.webp',
  'All_Capitals.html',
  'All_Flags.html',
  'Map_Quiz.html',
  'Logos/oceania.webp',
  'oceania.html',
  'oceania.js',
  'us.html',
  'mexico.html',
  'Mountain_Quiz.html',
  'mountain-sort.html',
  'Germany.html',
  'MemoryGame.html',
  'River_Map.html',
  'River.html',
  'capitals.js',
  'flag-script.js',
  'germany.js',
  'map-script.js',
  'memory.js',
  'memoryscript.js',
  'mexico.js',
  'capitals.css',
  'flag-styles.css',
  'map-styles.css',
  'Memory.html',
  'memory.css',
  'memorystyles.css',
  'mountain-quiz.css',
  'mountain-sort.css',
  'river.css',
  'worldcountries.css',
  'us.js',
  'river.js',
  'river-length-sort.js',
  'river-map.js',
  'worldcountries.js',
  'worldcountries.html',
  'africa.html',
  'asia.html',
  'europe.html',
  'northamerica.html',
  'southamerica.html',
  'oceania.html',
  'oceania.js',
  'africa.js',
  'asia.js',
  'europe.js',
  'northamerica.js',
  'southamerica.js',
  'worldcountries.js',
  'Capitals_Quizzes.html',
  'worldcountries.css',
  'worldcountries.html',
  'worldcountries_in_90.html',
  'worldcountries-90.js',
  'us states capitals.html',
  'shape.html',
  'worldcountries_empty.html',
  'statecapitals.css',
  'Bilder/offline.png',
  'worldcountries_map_click.html',
  'worldcountries_empty.js',
  'River Length Sort.html',
  'offline.html', // Ensure you have an offline fallback page
  'flags/ar.webp',
'flags/bo.webp',
'flags/br.webp',
'flags/cl.webp',
'flags/co.webp',
'flags/ec.webp',
'flags/gy.webp',
'flags/py.webp',
'flags/pe.webp',
'flags/sr.webp',
'flags/uy.webp',
'flags/ve.webp',
'flags/au.webp',
'flags/fj.webp',
'flags/ki.webp',
'flags/mh.webp',
'flags/fm.webp',
'flags/nr.webp',
'flags/nz.webp',
'flags/pw.webp',
'flags/pg.webp',
'flags/ws.webp',
'flags/sb.webp',
'flags/to.webp',
'flags/tv.webp',
'flags/vu.webp',
'flags/af.png',
'flags/bh.webp',
'flags/bd.webp',
'flags/bt.webp',
'flags/bn.webp',
'flags/kh.webp',
'flags/cn.webp',
'flags/cy.webp',
'flags/ge.webp',
'flags/in.webp',
'flags/id.webp',
'flags/ir.webp',
'flags/iq.webp',
'flags/il.webp',
'flags/jp.webp',
'flags/jo.webp',
'flags/kz.webp',
'flags/kw.webp',
'flags/kg.webp',
'flags/la.webp',
'flags/lb.webp',
'flags/my.webp',
'flags/mv.webp',
'flags/mn.webp',
'flags/mm.webp',
'flags/np.webp',
'flags/kp.webp',
'flags/om.webp',
'flags/pk.webp',
'flags/ps.webp',
'flags/ph.webp',
'flags/qa.webp',
'flags/sa.webp',
'flags/sg.webp',
'flags/kr.webp',
'flags/lk.webp',
'flags/sy.webp',
'flags/tj.webp',
'flags/th.webp',
'flags/tl.webp',
'flags/tr.webp',
'flags/tm.webp',
'flags/ae.webp',
'flags/uz.webp',
'flags/vn.webp',
'flags/ye.webp',
'flags/ag.webp',
'flags/bs.webp',
'flags/bb.webp',
'flags/bz.webp',
'flags/ca.webp',
'flags/cr.webp',
'flags/cu.webp',
'flags/dm.webp',
'flags/do.webp',
'flags/sv.webp',
'flags/gd.webp',
'flags/gt.webp',
'flags/ht.webp',
'flags/hn.webp',
'flags/jm.webp',
'flags/mx.webp',
'flags/ni.webp',
'flags/pa.webp',
'flags/kn.webp',
'flags/lc.webp',
'flags/vc.webp',
'flags/tt.webp',
'flags/us.webp',
'flags/dz.webp',
'flags/ao.webp',
'flags/bj.webp',
'flags/bw.webp',
'flags/bf.webp',
'flags/bi.webp',
'flags/cv.webp',
'flags/cm.webp',
'flags/cf.webp',
'flags/td.webp',
'flags/km.webp',
'flags/cd.webp',
'flags/dj.webp',
'flags/eg.webp',
'flags/gq.webp',
'flags/er.webp',
'flags/sz.webp',
'flags/et.webp',
'flags/ga.webp',
'flags/gm.webp',
'flags/gh.webp',
'flags/gn.webp',
'flags/gw.webp',
'flags/ci.webp',
'flags/ke.webp',
'flags/ls.webp',
'flags/lr.webp',
'flags/ly.webp',
'flags/mg.webp',
'flags/mw.webp',
'flags/ml.webp',
'flags/mr.webp',
'flags/mu.webp',
'flags/ma.webp',
'flags/mz.webp',
'flags/na.webp',
'flags/ne.webp',
'flags/ng.webp',
'flags/cg.webp',
'flags/rw.webp',
'flags/st.webp',
'flags/sn.webp',
'flags/sc.webp',
'flags/sl.webp',
'flags/so.webp',
'flags/za.webp',
'flags/ss.webp',
'flags/sd.webp',
'flags/tz.webp',
'flags/tg.webp',
'flags/tn.webp',
'flags/ug.webp',
'flags/zm.webp',
'flags/zw.webp',
'flags/al.webp',
'flags/ad.webp',
'flags/am.webp',
'flags/at.webp',
'flags/az.webp',
'flags/by.webp',
'flags/be.webp',
'flags/ba.webp',
'flags/bg.webp',
'flags/hr.webp',
'flags/cy.webp',
'flags/cz.webp',
'flags/dk.webp',
'flags/ee.webp',
'flags/fi.webp',
'flags/fr.webp',
'flags/ge.webp',
'flags/de.webp',
'flags/gr.webp',
'flags/hu.webp',
'flags/is.webp',
'flags/ie.webp',
'flags/it.webp',
'flags/xk.webp',
'flags/lv.webp',
'flags/li.webp',
'flags/lt.webp',
'flags/lu.webp',
'flags/mt.webp',
'flags/md.webp',
'flags/mc.webp',
'flags/me.webp',
'flags/nl.webp',
'flags/mk.webp',
'flags/no.webp',
'flags/pl.webp',
'flags/pt.webp',
'flags/ro.webp',
'flags/ru.webp',
'flags/sm.webp',
'flags/rs.webp',
'flags/sk.webp',
'flags/si.webp',
'flags/es.webp',
'flags/se.webp',
'flags/ch.webp',
'flags/tr.webp',
'flags/ua.webp',
'flags/gb.webp',
'flags/vt.webp',
];

self.addEventListener('install', (event) => {
  self.skipWaiting();
  event.waitUntil(
    (async () => {
      const cache = await caches.open(CACHE_NAME);
      let loaded = 0;

      for (const url of urlsToCache) {
        try {
          await cache.add(url);
          loaded++;
          // Send progress to the page
          const clients = await self.clients.matchAll();
          clients.forEach(client => {
            client.postMessage({
              type: 'CACHE_PROGRESS',
              loaded,
              total: urlsToCache.length
            });
          });
        } catch (err) {
          console.error('Failed to cache', url, err);
        }
      }

      // Send a final message when caching is complete
      const clients = await self.clients.matchAll();
      clients.forEach(client => {
        client.postMessage({
          type: 'CACHE_COMPLETE'
        });
      });
    })()
  );
});

self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.filter((name) => name !== CACHE_NAME).map((name) => caches.delete(name))
      );
    })
  );
  self.clients.claim();
});

self.addEventListener('fetch', (event) => {
  if (event.request.method !== 'GET') return;

  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      if (cachedResponse) return cachedResponse;
      
      return fetch(event.request).then((response) => {
        if (!response || response.status !== 200 || response.type !== 'basic') {
          return response;
        }
        
        // Dynamically cache JS, CSS, and images
        const responseClone = response.clone();
        caches.open(CACHE_NAME).then((cache) => {
          cache.put(event.request, responseClone);
        });
        return response;
      }).catch(() => caches.match('offline.html'));
    })
  );
});